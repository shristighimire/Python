# -*- coding: utf-8 -*-
"""Python(Day45).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y4hHJoEJH-1k07mk1s5OUhG4xYilM7Fw

Chapter 8 Homework - Part 2:
8-7: Message:

Make a list called friends that contains several of your friends. Create a function called message() which prints a message (such as “Hello there, Jim, how are you today?”) to each friend.  Now pass the list of friends to the function.
"""

def message(friends):
    for friend in friends:
        print(f"Hello there, {friend}, how are you today?")
friends = ["Shristi", "Ankita", "Aahana", "Swastika"]

message(friends)

"""8-8: Sending Messages:

Write a function called send_messages() that prints a text message to each friend and moves each friend from the friends list to a new list called sent_messages as it’s printed. After calling the function, print both of your lists to make sure the friends were moved correctly from friends to sent_messages.


"""

def send_messages(friends, sent_messages):
    while friends:
        current_friend = friends.pop()
        print(f" Hello there, {current_friend}, how are you today?")
        sent_messages.append(current_friend)
friends = ["Shristi", "Ankita", "Aahana", "Swastika"]
sent_messages = []

send_messages(friends, sent_messages)
print(friends)
print(sent_messages)

"""8-9: Archived Messages:

Start with your work from Exercise 8-8. Call the function send_messages() with a copy of the list of friends. After calling the function, print both of your lists to show that the original list of friends has not changed.


"""

def send_messages(friends, sent_messages):
    while friends:
        current_friend = friends.pop()
        print(f" Hello there, {current_friend}, how are you today?")
        sent_messages.append(current_friend)
friends = ["Shristi", "Ankita", "Aahana", "Swastika"]
sent_messages = []

send_messages(friends[:], sent_messages) #[:] makes a copy of the list
print(friends)
print(sent_messages)

"""8-10: Breakfast Order:

Write a function that accepts a list of items that a person wants for breakfast, for example, eggs, toast and coffee. The function should have one parameter that collects as many items as the function call provides, and it should print a summary of the items that are being ordered. Call the function three times, using a different number of arguments each time.


"""

def breakfast_order(*items):
    print("Breakfast Order:")
    for item in items:
        print("- " + item)
    print("Enjoy your meal!\n")

breakfast_order("pamcakes", "icecream", "coffee")
breakfast_order("blueberries", "strawberries", "orange juice", "cereal")
breakfast_order("bagel", "cream cheese","avocado","Milkshake")

"""8-11: Car Order:

Write a function called make_car() that collects information about a car and stores it in a dictionary. The function should always receive a manufacturer and a model name. It should then accept an arbitrary number of keyword arguments. Call the function with the required information and two other name-value pairs, such as a color or an optional feature such as a radio. Your function should work for a call like this one:

car = make_car('subaru', 'outback', color='blue', radio=’yes’)

Print the dictionary that’s returned to make sure that all the information is stored correctly.


"""

class Car:
    def __init__(self, manufacturer, model, color=None, leather=None):
        self.manufacturer = manufacturer
        self.model = model
        self.color = color
        self.leather = leather
def make_car(manufacturer, model, color=None, leather=None):
    return Car(manufacturer, model, color=color, leather=leather)

car = make_car('Tesla', '3', color='White', leather='White')
print("Manufacturer:", car.manufacturer)
print("Model:", car.model)
print("Color:", car.color)
print("Leather:", car.leather)

"""8-12. Module:

Store the function make_car() in a module called car.py.  Import the function and call the function using each of these approaches:

a)	import module_name  
b)	from module_name import function_name
c)	from module_name import function_name as fn
d)	import module_name as mn

"""

class Car:
  """Make a car"""
  def __init__(self, manufacturer, model, color):
    """Initialize a car"""
    self.manufacturer = manufacturer
    self.model = model
    self.color = color
def make_car(manufacturer, model, color=None):
    return Car(manufacturer, model, color=color)

my_car = Car('ford', 'mustang', 'red')
print(f"Attributes of my_car:\nManufacturer: {my_car.manufacturer}\nModel: {my_car.model}\nColor: {my_car.color}\n")