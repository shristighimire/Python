# -*- coding: utf-8 -*-
"""Python(day50).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tz5k3Z4L3PuBhGZqvomDbNE0uh5hLuJN
"""

# Import necessary libraries
import numpy as np
import pandas as pd
import tensorflow as tf
import matplotlib.pyplot as plt

data = pd.read_csv('stock.csv')

# Define features and target variable
features = data[['Feature1', 'Feature2', ...]]  # Replace with actual features
target = data['Closing_Price']  # Replace with the actual column for closing prices

# Split the data into training and testing sets
train_size = int(len(features) * 0.8)
train_features, test_features = features[:train_size], features[train_size:]
train_target, test_target = target[:train_size], target[train_size:]

# Build the TensorFlow model
model = tf.keras.Sequential([
    tf.keras.layers.Dense(64, activation='relu', input_shape=(len(features.columns),)),
    tf.keras.layers.Dense(1)
])

model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(train_features, train_target, epochs=10, batch_size=32, validation_split=0.2)

# Make predictions on the test set
predictions = model.predict(test_features)

# Data Visualization using Matplotlib
plt.figure(figsize=(10, 6))
plt.plot(test_target.values, label='Actual Prices')
plt.plot(predictions, label='Predicted Prices')
plt.title('Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('Stock Price')
plt.legend()
plt.show()

# Save the trained model for future use
model.save('stock_price_prediction_model.h5')

from alpha_vantage.timeseries import TimeSeries
import pandas as pd
ALPHA_VANTAGE_API_KEY = 'API Key'
stock_symbol = 'GOOGL'  # Google's parent company, Alphabet Inc., as an example

# Initialize Alpha Vantage API
ts = TimeSeries(key=ALPHA_VANTAGE_API_KEY, output_format='pandas')

# Fetch historical stock data
stock_data, meta_data = ts.get_daily(symbol=stock_symbol, outputsize='full')

# Display the fetched data
print(stock_data.head())

# Save the data to a CSV file
stock_data.to_csv('stock_data.csv', index=False)
print("Data saved to stock_data.csv")