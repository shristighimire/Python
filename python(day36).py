# -*- coding: utf-8 -*-
"""Python(day36).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Tzepi1e_rqiMlC6rkEgZA63z2kH8gNuk

# Chapter 6

# Dictionaries
A dictionary is a collection of key-value pairs.
*  Each key-value pair consists of a key and a value.
*   When you provide a key, Python returns the value associated with that key.

Curly braces are used to define a dictionary, and colons connect keys and values:
"""

native_language = {'john': 'english','sue':'italian','collin':'russian'}
print(native_language)

"""Commas separate individual key-value pairs:"""

native_language = {'john': 'english', 'juan': 'spanish',1:123}
print(native_language)

"""### Accessing the value associated with an individual key:
Give the name of the dictionary and then place the key in a set of square brackets.
*   If the key you're asking for is not in the dictionary, an error will occur.
"""

native_language = {'john': 'english', 'juan':'spanish','sue':'italian'}
print (native_language ['john'])
print (native_language ['sue'])
print(native_language)

print (native_language ['jon'])

"""Or use the get() method to access the value.
*   If the key doesn't exist, None is returned.
*   You can also specify a default value to use if the key is not in the dictionary.

"""

language1 = native_language.get('john')
native_language = {'john': 'english', 'juan':'spanish','sue':'italian'}
language2 = native_language.get('joe')
print (language1)
print (language2)

"""### Adding new key-value pairs:
Give the name of the dictionary and the new key in square brackets, and set it equal to the new value.
"""

native_language = {'john': ['english','polish','chinese'], 'juan':'spanish'}
native_language ['jean'] = 'french'
native_language ['wan'] = 'chinese'
native_language ['sue'] = 'italian'
native_language ['sue'] = 'arabic'
native_language ['sue'] = 'english'


print (native_language)
print(type(native_language))

"""Adding to an empty dictionary:"""

native_language  = {}
native_language ['john'] = 'english'
native_language ['juan'] = 'spanish'
native_language ['collin']= 'russian'
print (native_language)

"""To modify the value in a key-value pair, enclose the key in square brackets, then provide the new value for that key."""

native_language ={'john': ['english','french'], 'juan':'spanish'} # juan is key and spanish is value
#native_language ['john'] = 'arabic'
print (native_language['john'])

del native_language['juan']
print(native_language)

for n, l in native_language.items():


  if type(l) == list:
    for x in range(len(l)):
      print (f'{n} speaks {l[x]}')
  else:
    print (f'{n} speaks {l}')

native_language = {'shri': ['english','nepali'],'saloni':'hindi','Shristi': [ 'Danish','Nepali','Spanish','Hindi']}
for key, value1 in native_language.items():
  if type(value1) == list:    #if we dont use if statement and while in next line, it will not go throung every value
    while value1:
      lango = value1.pop(0)
      print (f'{key.title()} speaks {lango.title()}')
  else:
    print (f'{key.title()} speaks {value1.title()}')

"""Note that keys in a dictionary are UNIQUE!"""

#.clear erases the dictionary completely.

"""What if john is bilingual?"""





#@title
native_language = {'john': ['english','french'], 'juan':'spanish'}
for x,y in native_language.items():

  if type(y) == list:
    while y:
      z=y.pop(0)
      print(x, "speaks", z)

  else: print(x, "speaks", y)

#@title
native_language = {'john': ['english','french'], 'juan':'spanish'}
for x,y in native_language.items():
  print (x)

  if type(y) == list:
    for z in range(len(y)):
      print(z)
      print("-", y[z])

  else: print("-", y)

"""### Removing key-value pairs:
Use the del keyword and the dictionary name, followed by the key in square brackets.
*   This will delete the key and its associated value.
"""

native_language = {'john': 'english', 'juan':'spanish'}
del native_language ['john']
print (native_language)
print(native_language['juan'])

"""Use the len() function to find a dictionary's length, i.e. the number of key-value pairs in the dictionary:"""

fav_languages = {'jen': 'python', 'sarah': 'c','edward': 'ruby','phil': 'python'}
num_entries = len(fav_languages)
print (num_entries)

remov = fav_languages.pop('jen')
print(fav_languages)
print(remov)

remov = fav_languages.popitem()
print(fav_languages)
print(remov)
print(type(remov))

fav_languages.clear()
print(fav_languages)

"""### Looping through a dictionary
You can loop through a dictionary in three ways:

1. all the keys,
2. all the values, or
1. all the ney-value pairs.

1. Use the keys() method to loop through the keys in a dictionary.
* keys() is the default behavior when looping through a dictionary, so it can be omitted.
"""

fav_languages = {'jen': 'python','sarah': 'c','edward': 'ruby','phil': 'python'}
for name in fav_languages.values():                  #only value
	print(name)

fav_languages = {'jen': 'python','sarah': 'c','edward': 'ruby','phil': 'python'}
for name in fav_languages:            #only key
	print(name)

fav_languages = {'jen': 'python','sarah': 'c','edward': 'ruby','phil': 'python'}
for name in fav_languages.items():                        #both key andvalue
	print(name)

"""2. Use the values() method to loop through the values in a dictionary."""

fav_languages = {'jen': ['python','cobol'],'sarah': 'c','edward': 'ruby','phil': 'python'}
for x in fav_languages.values():
	print(x, end=', ')

Fav_languages = {'jen': ['python','cobol'],'sarah': 'c','edward': 'ruby','phil': 'python'}
for x in fav_languages.keys():
	print(x, end=', ')

Fav_languages = {'jen': ['python','cobol'],'sarah': 'c','edward': 'ruby','phil': 'python'}
for x in fav_languages.items():
	print(x, end=', ')

"""3. Use the items() method to return a list of key-value pairs.
* The items() are keys() and values().
"""

fav_languages = {'jen': 'python','sarah': ['c', 'python'],'edward': 'ruby','phil': 'python'}
for name, language in fav_languages.items():
	print (f"{name} knows {language}")

fav_languages = {'jen': 'python','sarah': ['c', 'python'],'edward': 'ruby','phil': 'python'}
for name, language in fav_languages.items():
  if type(language)==list:
    while language:
      multilingual=language.pop(0)
      print(name, "speaks", multilingual)
  else:
   print (f"{name} knows {language}")

fav_languages = {'jen': 'python','sarah': ['c', 'python'],'edward': 'ruby','phil': 'python'}
for name, language in fav_languages.items():
  if type(language)==list:
    while language:
      print(name, "speaks", language.pop(0))
  else:
   print (f"{name} knows {language}")

"""### Sorting a dictionary
Use the **sorted()** function to print the names in alphabetical order:

"""

fav_languages = {'jen': ['python','JAVA'],'sarah': ['REACT','c'],'edward': 'ruby','phil': 'python'}
print(sorted(fav_languages))
print(len(fav_languages))

"""Use the sorted() function to print the items in alphabetical order:"""

print(sorted(fav_languages.items()))
print(fav_languages)

#Use the sorted() function to print the values in alphabetical order:
print(sorted(fav_languages.values()))

#Use the set() function to eliminate repetitions.
print(sorted(set(fav_languages.values())))

"""### Using the dict() function
Dictionaries can also be created using the built-in dict() function.



"""

#Creating a dictionary from assignments
x = dict(name = "John", age = 36, country = "Norway")
print(x)

"""The function will also accept arguments to create dictionaries out of other iterable entities, such as lists."""

#Creating a dictionary from a list of tuple pairs
y = [('name', 'John'), ('age', 36), ('country', 'Norway')]
y = dict(y)
print(y)

"""### Using the **dict.fromkeys()** method:
It is also possible to create a blank copy of a dictionary using the **dict.fromkeys(iterable, value=None)** method:
"""

z={}
names=['jo', 'pete', 'sara', 'ahmed']
z = z.fromkeys(names)
print(z)
z = z.fromkeys(names,0)
print(z)

fav_languages = {'jen': 'python','sarah': 'c','edward': 'ruby','phil': 'python'}
z={}
z = z.fromkeys(fav_languages)
print(z)

"""# Nesting:
Collecting a collection:
1.   Storing a set of dictionaries in a list.
2.   Storing lists inside a dictionary.
1.   Storing a dictionary inside another dictionary.

1. Storing a set of dictionaries in a list.
"""

user1 = {'last': 'fermi', 'first': 'enrico', 'username': 'efermi'}
user2 = {'last': 'curie', 'first': 'marie', 'username': 'mcurie'}
users = [user1,user2]
for user in users:
	print (user)
print(users)

"""Adding to the list:"""

user3 = {'last': 'einstein', 'first': 'albert', 'username': 'aeinstein'}
users.append(user3) #TO ADD ANY NEW DATA IN THE DICIONARY WITHOU HAVING TO RETYPE THE WHOLE DICTIONARY
print (users)

"""2. Nesting lists in a dictionary.
*   Allows you to associate more than one value with each key.
"""

computer_languages = {
'jen': ['python', 'ruby'],
'sarah': ['c'],
'edward': ['ruby', 'go'],
'phil': ['python', 'haskell'],
}
for name, langs in computer_languages.items():
	print (f"{name}: ")
	for lang in langs:
	 print (f"- {lang}")

"""3. Nesting a dictionary in a dictionary.
*   Each value associated with a key is itself a dictionary.
*   Example: provide information about a user in a dictionary, and use the user's username as a key in a dictionary of users.
"""

#@title
user1 = {'last': 'fermi', 'first': 'enrico', 'location': 'chicago'}
user2 = {'last': 'curie', 'first': 'marie', 'location': 'paris'}
users = {'efermi':user1,'mcurie':user2}
for x, y in users.items():
  print ("\nUsername: " + x)
  full_name = y['first'] + " " + y['last']
  location = y['location']
  print (f"\tFull name: {full_name.title()}")
  print (f"\tLocation: {location.title()}")

"""## Filling a dictionary with user input:
Gather user input and store in a dictionary:`
"""

attendance = {} #creating a dictionary named"attendance"
active = True #setting a variable "active" to true for while loop
while active: #starting a while loop
  name = input('What is your name? ')
  response = input('Did you attend class today? ')
  attendance[name] = response  #building dictionary in this line
  repeat = input('Has everyone responded? ')
  if repeat == 'yes':
    active = False
print (attendance)

for x,y in attendance.items():
  print(x,'attendance: ',y)

"""### In Class Exercise:
Create a dictionary called sandwiches and using user input, fill it with the name of each user and a sandwich. Take three orders and then print the dictionary.

Then loop through the dictionary of sandwich orders and print a message for each order, such as "Pete, I made you a tuna sandwich."
"""

