# -*- coding: utf-8 -*-
"""Python(Day43).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PbjEZM118eWHSASYpbfb_cnkPyQK5lKV

### Create a Class:  Car
"""

class Car:
	"""A simple attempt to model a car."""

	def __init__(self, make, model, color):
		"""Initialize car attributes."""
		self.make = make
		self.model = model
		self.color = color

"""### Create an object from a class:"""

my_car = Car('ford', 'mustang', 'red')

"""Accessing attribute values:"""

print(my_car.make)
print(my_car.model)
print(my_car.color)

"""Creating multiple objects"""

my_old_car = Car('volkswagon', 'golf', 'green')
my_truck = Car('toyota', 'tacoma', 'blue')

"""access new objects"""

print(my_old_car.make)
print(my_old_car.model)
print(my_old_car.color)

print(my_truck.make)

"""Setting a default value for an attribute:

    self.fuel_capacity = 15
    self.fuel_level = 0
"""

class Car:
	"""A simple attempt to model a car."""

	def __init__(self, make, model, color):
		"""Initialize car attributes."""
		self.make = make
		self.model = model
		self.color = color
		# Fuel capacity and level in gallons.
		self.fuel_capacity = 15
		self.fuel_level = 0

my_car = Car('ford', 'mustang', 'red')

print(my_car.fuel_capacity)
print(my_car.fuel_level)

"""### Adding methods (behavior) to a class:"""

class Car:
	"""A simple attempt to model a car."""

	def __init__(self, make, model, color):
		"""Initialize car attributes."""
		self.make = make
		self.model = model
		self.color = color
		# Fuel capacity and level in gallons.
		self.fuel_capacity = 15
		self.fuel_level = 0

	def fill_tank(self):
		"""Fill gas tank to capacity."""
		self.fuel_level = self.fuel_capacity
		print("Fuel tank is full.")

	def drive(self):
		"""Simulate driving."""
		print("The car is moving.")

	def stop(self):
		print("The car is stopped")

my_car = Car('ford', 'mustang', 'red')

"""Calling methods"""

print(my_car.fuel_level)

my_car.fill_tank()
my_car.drive()

print(my_car.fuel_level)

"""### Modifying an attribute's value directly:"""

my_car.fuel_level = 5
my_car.color='yellow'
print(my_car.fuel_level)
print(my_car.color)

"""### Updating an attribute's value with a method:"""

class Car:
	"""A simple attempt to model a car."""

	def __init__(self, make, model, color):
		"""Initialize car attributes."""
		self.make = make
		self.model = model
		self.color = color
		# Fuel capacity and level in gallons.
		self.fuel_capacity = 15
		self.fuel_level = 0

	def fill_tank(self):
		"""Fill gas tank to capacity."""
		self.fuel_level = self.fuel_capacity
		print("Fuel tank is full.")

	def drive(self):
		"""Simulate driving."""
		print("The car is moving.")

	def update_fuel_level(self, new_level):
		"""Update the fuel level."""
		if new_level <= self.fuel_capacity:
			self.fuel_level = new_level
		else:
			print("The tank can't hold that much!")

my_car = Car('ford', 'mustang', 'red')
print(my_car.fuel_level)
my_car.update_fuel_level(15)
print(my_car.fuel_level)

my_car.drive()

my_car.update_fuel_level(20)
print(my_car.fuel_level)

"""Incrementing an attribute's value with a method:"""

class Car:
  """A simple attempt to model a car."""

  def __init__(self, make, model, color):
	  """Initialize car attributes."""
	  self.make = make
	  self.model = model
	  self.color = color
	  # Fuel capacity and level in gallons.
	  self.fuel_capacity = 15
	  self.fuel_level = 0

  def fill_tank(self):
	  """Fill gas tank to capacity."""
	  self.fuel_level = self.fuel_capacity
	  print("Fuel tank is full.")

  def drive(self):
	  """Simulate driving."""
	  print("The car is moving.")

  def add_fuel(self, amount):
	  """Add fuel to the tank."""
	  if (self.fuel_level + amount <= self.fuel_capacity):
		  self.fuel_level += amount
		  print("Fuel added.")
	  else:
		    print("The tank won't hold that much.")

  def check_fuel(self):
    if self.fuel_level <= 1:
       print('You are nearly out of gas')
    else: print("You are good to go")

my_car = Car('ford', 'mustang', 'red')
my_car.check_fuel()
my_car.add_fuel(5)
my_car.add_fuel(5)
print(my_car.fuel_level)
my_car.check_fuel()
print(my_car.make, my_car.model, my_car.color)

"""# Inheritance:
### When one class inherits the properties of another class
Example: a convertible inherits the general properties of a car

Include the name of the parent class in parentheses:
"""

class Convertible(Car):
  """A simple model of a convertible."""

  def __init__(self, make, model, color):
    """Initialize a convertible."""
    super().__init__(make, model, color)

    # Attribute specific to convertibles.
    self.removable_top= 'soft'

my_car=Convertible('ford','mustang','red')
print(my_car.removable_top)
print(my_car.fuel_level)

"""Adding new methods to the child class:"""

class Convertible(Car):
  """A simple model of a convertible."""

  def __init__(self, make, model, color):
    """Initialize a convertible."""
    super().__init__(make, model, color)

    # Attribute specific to convertibles.
    self.removable_top= 'soft'

  def lower(self):
    """lower the convertible top."""
    self.position = 'down'
    print("The convertible top is down.")

  def upper(self):
    """raise the convertible top."""
    self.position = 'up'
    print("The convertible top is up.")

"""Using child methods and parent methods:"""

my_convertible = Convertible('ford', 'mustang', 'red')
my_convertible.lower()
my_convertible.drive()

"""# Instances as attributes:
Using an instance of Motor as an attribute of Car

Create a new class for Motor
"""

class Motor:
  """A motor for a car."""

  def __init__(self, size=4):
    """Initialize motor attributes."""
    # size in number of cylinders
    self.size = size

  def get_efficiency(self):
    """Return the motor's fuel efficiency."""
    if self.size == 4:
      return 25
    elif self.size == 6:
	    return 23
    elif self.size == 8:
	    return 20

"""Using an instance of Motor as an attribute of Car:"""

class Car:
  def __init__(self, make, model, color):
    """Initialize car attributes."""
    self.make = make
    self.model = model
    self.color = color

    # Fuel capacity and level in gallons.
    self.fuel_capacity = 15
    self.fuel_level = 0
    #Add a moto
    self.motor= Motor()

"""Using the instance:"""

my_car = Car('ford', 'mustang','red')
print(my_car.motor.size, 'cylinders')
print(my_car.motor. get_efficiency(), 'mpg')

"""# Importing classes

Store classes in the file car.py
"""

class Car:
	"""A simple attempt to model a car."""

	def __init__(self, make, model, color):
		"""Initialize car attributes."""
		self.make = make
		self.model = model
		self.color = color
		# Fuel capacity and level in gallons.
		self.fuel_capacity = 15
		self.fuel_level = 0

	def fill_tank(self):
		"""Fill gas tank to capacity."""
		self.fuel_level = self.fuel_capacity
		print("Fuel tank of this", self.make, "is full.")

class Convertible(Car):
  """A simple model of a convertible."""

  def __init__(self, make, model, color):
    """Initialize a convertible."""
    super().__init__(make, model, color)

    # Attribute specific to convertibles.
    self.removable_top= 'soft'

  def lower(self):
    """lower the convertible top."""
    self.position = 'down'
    print("The convertible top is down.")

  def upper(self):
    """raise the convertible top."""
    self.position = 'up'
    print("The convertible top is up.")

"""1. Import an individual class from the module car.py"""

from car import Convertible

my_car = Convertible('ford', 'mustang', 'red')
#run the fill_tank() method
my_car.fill_tank()
#print the type of removable top.
print ('The car has a ', my_car.removable_top, ' top.')

"""2. Import an entire module:

Must prefix module name (car.) to access classes:
"""

import car

my_car = car.Convertible('ford', 'mustang', 'red')
my_car.fill_tank()
print ('The car has a ', my_car.removable_top, ' top.')

my_beetle = car.Car('volkswagen', 'beetle', 'blue')
my_beetle.fill_tank()

"""3. Import all classes from a module"""

from car import *
my_beetle = Car('volkswagen', 'beetle', 'blue')

"""### 4. Import a module (car1.py) into a module (convertible.py):
1. Create a module (car1.py) for Car and a separate module (convertible.py) for Convertible.

2. Insert "from car1 import Car" as first line of convertible.py

2. Import each module separately.
"""

from car1 import Car
from convertible import Convertible

my_car = car.Convertible('ford', 'mustang', 'red')
my_car.fill_tank()
print ('The car has a ', my_car.removable_top, ' top.')

my_beetle = Car('volkswagen', 'beetle', blue')
my_beetle.fill_tank()

"""# Storing objects in a List
Making a list of cars:
"""

# Make lists to hold a fleet of cars.
car_fleet = []
# Make 10 cars.
for _ in range(10):
  car = Car('ford', 'escape', 'red')
  car_fleet.append(car)

# Fill up the gas cars.
for car in car_fleet:
  car.fill_tank()

print(f"Car fleet: {len(car_fleet)}")
print(car_fleet[0].make, car_fleet[0].model, car_fleet[0].color, car_fleet[0].fuel_level)

"""## Storing objects in a Dictionary
The __dict__ method stores an object's attributes in a dictionary.

"""

car = Car('toyota', 'rav4' , 'red')
x = car.__dict__
print(x)
for y,z in x.items():
  print (y,'is',z)

class Counter :

   ## Gets the current value of this counter.
   #  return the current value
   #

   def getValue(self) :
      return self._value

   ## Advances the value of this counter by 1.
   #
   def click(self) :
      self._value = self._value + 1

   ## Resets the value of this counter to 0.
   #
   def reset(self) :
      self._value = 0

x = Counter()
#x.reset()
#x.click()
y=x.getValue()
print(y)
