# -*- coding: utf-8 -*-
"""Python(day 39) functions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VrQE_5Z70R5PaGaUpQymOupb-peDKgMJ

# Functions are blocks of code designed to do a specific job.

 Functions are efficient: write code once and use whenever you need to accomplish the same task.
"""

!pip3 install ColabTurtle
from ColabTurtle.Turtle import *

initializeTurtle(1)

def square(): #defination of the function
  '''draw a square'''#with functions, indentations are compulsory, use TAB not space
  #the quotes are called doc string it can have single or doyble quotes but its three sets of them on either sides
  #only variables are predifined, the numbers aren't predefined.
  side_length = 20
  angle = 10

  for i in range(40):
    forward(side_length) #defining what side_length and angle will be
    right(angle)

square() #this is calling the function

initializeTurtle()

forward(100)
right(90)

initializeTurtle(1)
square()

def convcent():
  '''converts from inch to centimeter'''

  cm == int(inch * 32)
  print(cm)
convcent()

"""# Defining a function:
1.   first line: def greet_user():
2.   any docstring is in triple quotes
1.   body is indented one level
2.   to call the function, write: greet_user()


"""

def greet_user():
	"""Display a simple greeting."""
	print("Hello!")
greet_user()

"""# Providing information to a function:
*  Information required by the function is specified in the def name parentheses.
*  Information passed to the function is given in the function call.



"""

def greet_user(name):
	"""Display a personalized greeting."""
	print("Hello, " + name.title() + "!")

greet_user('jesse')
greet_user('sarah')

def square(side_length):
  '''draw a square with a side length'''
  angle = 90

  for i in range(4):
    forward(side_length)
    right(angle)

initializeTurtle()
square(100)
square(150)

initializeTurtle(8)

size = 20

for n in range(15):
  square(size)
  size += 10
  forward(10)
  right(18)

"""add color:

color('red')

bgcolor(255,255,220)

# Providing multiple parameters:

### positional and keyword *arguments*

**positional arguments**: order of arguments (values) matters
"""

def polygon(sides, side_length):
  '''draw a polygon'''
  angle = 360/sides

  for i in range(sides):
    forward(side_length)
    right(angle)

initializeTurtle()
polygon(4,50)

initializeTurtle()
for n in range(4,8):
  polygon(n,100)

initializeTurtle(12)
polygon(100,6)

def describe_pet(animal, name):
	"""Display information about a pet."""
	print(f"\nI have a {animal}.")
	print(f"It's name is {name}.")
#describe_pet('hamster', 'harry')
describe_pet('wallie','dog')

"""**keyword arguments**: uses key:value pairs to pass information"""

def describe_pet(animal='unknown', name='unnamed'):
	"""Display information about a pet."""
	print(f"\nI have a {animal}.")
	print(f"Its name is {name}.")
describe_pet(animal='zebra', name='harry')
describe_pet(name='wallie', animal='dog')
describe_pet()

"""# Setting a default value for a funtion"""

def make_pizza(topping='bacon'):
  """Make a single-topping pizza."""
  print(f'Have a {topping} pizza!')

make_pizza()
make_pizza('pepperoni')

"""Parameters with default values must be listed after parameters without default values in the function's definition"""

def make_pizza(customer_name, topping='bacon'):
  """Make a single-topping pizza."""
  print("Have a " + topping + " pizza!")
  print(f'{customer_name}, have a {topping} pizza!')

make_pizza('Jesse', 'mushroom')
#make_pizza(topping='mushroom',customer_name='Jesse')

"""# Returning a value or a set of values"""

def add_numbers(x, y):
  """Add two numbers and return the sum."""
  return x + y
apple = add_numbers("jo", " pete")
print (apple)

banana = add_numbers(4,7)
print (banana)

print(apple + banana)

"""## An asterisk* is used to pass an arbitrary number of arguments."""

def add_numbers(*numbers):
	"""Add several numbers and return the sum."""
	x=0
	for y in numbers:
		x = x + y
	return x

apple = add_numbers(1, 2, 3, 4, 5, 6, 7)
print (apple)

apple = add_numbers(1, 2, 3, 4, 5, 6, 7)
print (apple)

def convertgal(*gal):
  '''convert gallons to litres.'''
  litres=0
  for gallons in gal:
   litres= gallons*0.264172
  return litres

  gallons = convertgal(1)
  print(gallons)

gallons = convertgal(5)
print(gallons)

"""# Returning a list or a dictionary"""

def build_person(first, last, age='0'):
	"""Return a dictionary of information about a person."""
	person = {'first':first,'last': last, 'age':age}
	return person

musician = build_person('jimi','hendrix', 30)
print(musician)

person = build_person('john','chapman')
print(person)

"""## Returning a dictionary with optional values"""

def build_person(first, last, city, age=1):
	"""Return a dictionary of information about a person."""
	person = {'first': first, 'last': last, 'city': city}
	if age:
		person['age'] = age
	return person

musician = build_person('jimi', 'hendrix','Chicago')
print(musician)

"""# Passing a list to a function"""

def greet_users(names):
     """Print a simple greeting to everyone."""
     for name in names:
        msg = f"Hello, {name.title()}!"
        print(msg)

usernames = ['hannah', 'ty', 'margot', 'jo']
greet_users(usernames)

list1 = ['a', 'b', 'c']
greet_users(list1)

greet_users(['samantha'])

"""### Changes the function makes to the list will affect the original list."""

def greet_users(names):
	"""Print a simple greeting to everyone."""
	while names:
		name=names.pop()
		msg = f"Hello, {name.title()}!"
		print(msg)

friends = ['hannah', 'ty', 'margot']
greet_users(friends[:])
print(friends)

"""### To prevent a function from modifying a list, pass a copy of the list as an argument."""

greet_users(usernames[:])

"""## Using the * operator to collect an arbitrary number of arguments."""

def make_pizza(size, *toppings):
	"""Make a pizza."""
	print(f"\nMaking a {size} pizza.")
	print("Toppings:")
	for topping in toppings:
		print(f"- {topping}")

# Make three pizzas with different toppings.
make_pizza('small', 'pepperoni')
make_pizza('large', 'bacon bits', 'pineapple')
make_pizza('medium', 'mushrooms', 'peppers',
'onions', 'extra cheese')

"""## Using the ** operator to collect an arbitrary number of keyword arguments"""

def build_profile(first, last, **user_info):
	"""Build a dictionary for a user."""
	person = {'first': first, 'last': last}
	for x,y in user_info.items():
		person[x]=y
	return person

# Create two users with different kinds of information.

user_0 = build_profile('albert', 'einstein', field='physics')
user_1 = build_profile('marie', 'curie', location='paris', field='chemistry')

print(user_0)
print(user_1)

"""#  Creating a Module to save a Function"""

def make_pizza(size, *toppings):
	"""Make a pizza."""
	print(f"\nMaking a {size} pizza.")
	print("Toppings:")
	for topping in toppings:
		print(f"- {topping}")

# Make three pizzas with different toppings.
make_pizza('small', 'pepperoni')
make_pizza('large', 'bacon bits', 'pineapple')
make_pizza('medium', 'mushrooms', 'peppers',
'onions', 'extra cheese')

make_pizza('small', 'pepperoni')

"""### Creating a module named pizza.py in Colab
1.   Click on the folder on the left side of the Colab window.
1.   Right click in the folder window, select "New file" and name it: **pizza.py**
2.   Double click on the pizza.py file and it will appear on the right side of the Colab window.
2.   Copy the **make_pizza()** function and paste it into the pizza.py file.
1.   Download the pizza.py file to your desktop by selecting the 3 dots or by right clicking on the file.

*   You can close the pizza.py file by clicking the X.
*   Note: pizza.py is a **temporary** file in Colab!
*   To reload the pizza.py file to Colab, upload it from your desktop using the upload icon in the Files window.
"""

import pizza
pizza.make_pizza('small',"macaroni")

pizza.make_pizza('small', 'pepperoni')
pizza.make_pizza('large', 'bacon bits', 'pineapple')
pizza.make_pizza('medium', 'mushrooms', 'peppers',
'onions', 'extra cheese')

from pizza import make_pizza
make_pizza('small', 'pepperoni')
make_pizza('large', 'bacon bits', 'pineapple')
make_pizza('medium', 'mushrooms', 'peppers',
'onions', 'extra cheese')

from pizza import make_pizza
make_pizza('small', 'pepperoni')

from pizza import make_pizza as mp
mp('small', 'pepperoni')
mp('large', 'bacon bits', 'pineapple')
mp('medium', 'mushrooms', 'peppers',
'onions', 'extra cheese')

import pizza as p
p.make_pizza('small',"macaroni")

"""### The random module"""

from random import randint
randint(1, 6)

randint(1, 6)

numbers=[]
for number in range(10):
  numbers.append(randint(1, 6))
print(numbers)

from random import choice
players = ['charles', 'martina', 'michael', 'florence', 'eli']
first_up = choice(players)
print(first_up)

first_up = choice(players)
print(first_up)