# -*- coding: utf-8 -*-
"""python(day 38).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WxvCTbcf3kGE8YjqpoNFXTBLlLj8qHZR

# Defining a function:
1.   first line: def name():
2.   any docstring is in triple quotes
1.   body is indented one level
2.   to call, give name()
"""

def greet_user():
	"""Display a simple greeting."""
	print("Hello!")
	print("Goodbye")
greet_user()
greet_user()

"""# Providing information to a function:
*  Information required by the function is specified in the def name parentheses.
*  Information passed to the function is given in the function call.



"""

def greet_user(name):
	"""Display a personalized greeting."""
	print("Hello, " + name.title() + "!")

greet_user('jesse')
greet_user('sarah')

"""# Providing multiple parameters:

### positional and keyword *arguments*

**positional arguments**: order of arguments (values) matters
"""

def describe_pet(animal, name):
	"""Display information about a pet."""
	print(f"\nI have a {animal}.")
	print(f"Its name is {name}.")
#describe_pet('hamster', 'harry')
describe_pet('willie', 'dog')

"""**keyword arguments**: uses key:value pairs to pass information"""

def describe_pet(animal, name):
	"""Display information about a pet."""
	print(f"\nI have a {animal}.")
	print(f"Its name is {name}.")
describe_pet(animal='zebra', name='harry')
describe_pet(name='willie', animal='dog')

"""### **function call**

# Setting a default value for a funtion
"""

def make_pizza(topping='bacon'):
  """Make a single-topping pizza."""
  print(f'Have a {topping} pizza!')

make_pizza()
make_pizza('pepperoni')



def make_pizza(topping_2, topping='bacon'):
  """Make a single-topping pizza."""
  print(f'Have a {topping} + {topping_2} pizza!')

make_pizza('mushrooms')
make_pizza('pepperoni')

"""Parameters with default values must be listed after parameters without default values in the function's definition"""

def make_pizza(customer_name, topping='bacon'):
  """Make a single-topping pizza."""
  print("Have a " + topping + " pizza!")
  print(f'{customer_name}, have a {topping} pizza!')

make_pizza('Jesse')
make_pizza('Jesse','mushroom')

"""# Returning a value or a set of values"""

def add_numbers(x, y):
	"""Add two numbers and return the sum."""
	return x + y
apple = add_numbers(3, 5)
print (apple)

"""## An asterisk* is used to pass an arbitrary number of arguments."""

def add_numbers(*numbers):
	"""Add several numbers and return the sum."""
	x=0
	for y in numbers:
		x = x + y
	return x

apple = add_numbers(1, 2, 3, 4,)
print (apple)

"""# Returning a list or a dictionary"""

def build_person(first, last):
	"""Return a dictionary of information about a person."""
	person = [first, last]
	return person

musician = build_person('jimi','hendrix')
print(musician)

"""## Returning a dictionary with optional values"""

def build_person(first, last, age=None):
	"""Return a dictionary of information about a person."""
	person = {'first': first, 'last': last}
	if age:
		person['age'] = age
	return person

musician = build_person('jimi', 'hendrix', 27)
print(musician)

"""# Passing a list to a function"""

def greet_users(names):
     """Print a simple greeting to everyone."""
     for name in names:
        msg = f"Hello, {name.title()}!"
        print(msg)

usernames = ['hannah', 'ty', 'margot']
greet_users(usernames)

"""### Changes the function makes to the list will affect the original list."""

def greet_users(names):
	"""Print a simple greeting to everyone."""
	while names:
		name=names.pop()
		msg = f"Hello, {name.title()}!"
		print(msg)

usernames = ['hannah', 'ty', 'margot']
greet_users(usernames)
print(usernames)

"""### To prevent a function from modifying a list, pass a copy of the list as an argument."""

greet_users(usernames[:])

"""## Using the * operator to collect an arbitrary number of arguments."""

def make_pizza(size, *toppings):
	"""Make a pizza."""
	print(f"\nMaking a {size} pizza.")
	print("Toppings:")
	for topping in toppings:
		print(f"- {topping}")

# Make three pizzas with different toppings.
make_pizza('small', 'pepperoni')
make_pizza('large', 'bacon bits', 'pineapple')
make_pizza('medium', 'mushrooms', 'peppers',
'onions', 'extra cheese')

"""## Using the ** operator to collect an arbitrary number of keyword arguments"""

def build_profile(first, last, **user_info):
	"""Build a dictionary for a user."""
	person = {'first': first, 'last': last}
	for x,y in user_info.items():
		person[x]=y
	return person

# Create two users with different kinds of information.

user_0 = build_profile('albert', 'einstein', location='princeton')
user_1 = build_profile('marie', 'curie', location='paris', field='chemistry')

print(user_0)
print(user_1)
